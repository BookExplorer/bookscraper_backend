"""Start basic database

Revision ID: 10b26d4be2ce
Revises: 
Create Date: 2025-05-10 02:43:32.451229

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '10b26d4be2ce'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('countries',
    sa.Column('still_exists', sa.Boolean(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.CheckConstraint('(still_exists IS TRUE AND end_date IS NULL) OR (still_exists IS FALSE AND end_date IS NOT NULL)', name='chk_country_status'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('uq_active_country_name', 'countries', ['name'], unique=True, postgresql_where=sa.text('still_exists IS TRUE'))
    op.create_index('uq_inactive_country', 'countries', ['name', 'end_date'], unique=True, postgresql_where=sa.text('still_exists IS FALSE'))
    op.create_table('regions',
    sa.Column('country_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('country_id', 'name')
    )
    op.create_table('cities',
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.Column('country_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.CheckConstraint('(region_id is NOT NULL and country_id is NULL) OR (country_id is NOT NULL and region_id is NULL)'),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('uq_city_country', 'cities', ['country_id', 'name'], unique=True, postgresql_where=sa.text('country_id IS NOT NULL'))
    op.create_index('uq_city_region', 'cities', ['region_id', 'name'], unique=True, postgresql_where=sa.text('region_id IS NOT NULL'))
    op.create_table('authors',
    sa.Column('goodreads_id', sa.Integer(), nullable=True),
    sa.Column('goodreads_link', sa.String(), nullable=True),
    sa.Column('birth_city_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['birth_city_id'], ['cities.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('goodreads_id'),
    sa.UniqueConstraint('goodreads_link')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('authors')
    op.drop_index('uq_city_region', table_name='cities', postgresql_where=sa.text('region_id IS NOT NULL'))
    op.drop_index('uq_city_country', table_name='cities', postgresql_where=sa.text('country_id IS NOT NULL'))
    op.drop_table('cities')
    op.drop_table('regions')
    op.drop_index('uq_inactive_country', table_name='countries', postgresql_where=sa.text('still_exists IS FALSE'))
    op.drop_index('uq_active_country_name', table_name='countries', postgresql_where=sa.text('still_exists IS TRUE'))
    op.drop_table('countries')
    # ### end Alembic commands ###
